View(train)
median(train$HP)
median(train$Attack)
median(train$Defense)
median(train$Sp..Atk)
median(train$Sp..Def)
median(train$Speed)
library(caret)
library(doSNOW)
train = read.csv("Pokemon.csv", stringsAsFactors = FALSE)
View(train)
table(train$Type.2)
train$Type.2[train$Type.2 == ""] <- "No Second Type"
train$OverallStrength <- ifelse(train$Total > median(train$Total),
"Strong", "Weak")
train$isDragon <- ifelse(train$Type.1 == "Dragon", "Y", "N")
train$hasHighHP <- ifelse(train$HP > median(train$HP), "Y", "N")
train$hasHighAttack <- ifelse(train$Attack > median(train$Attack), "Y", "N")
train$hasHighDefense <- ifelse(train$Defense > median(train$Defense), "Y", "N")
train$hasHighSpAtk <- ifelse(train$Sp..Atk > median(train$Sp..Atk), "Y", "N")
train$hasHighSpDef <- ifelse(train$Sp..Def > median(train$Sp..Def), "Y", "N")
train$hasHighSpeed <- ifelse(train$Speed > median(train$Speed), "Y", "N")
train$Type.1 <- as.factor(train$Type.1)
train$Type.2 <- as.factor(train$Type.2)
train$Generation <- as.factor(train$Generation)
train$Legendary <- as.factor(train$Legendary)
train$OverallStrength <- as.factor(train$OverallStrength)
train$isDragon <- as.factor(train$isDragon)
train$hasHighHP <- as.factor(train$hasHighHP)
train$hasHighAttack <- as.factor(train$hasHighAttack)
train$hasHighDefense <- as.factor(train$hasHighDefense)
train$hasHighSpAtk <- as.factor(train$hasHighSpAtk)
train$hasHighSpDef <- as.factor(train$hasHighSpDef)
train$hasHighSpeed <- as.factor(train$hasHighSpeed)
View(train)
features <- c("Type.1", "Type.2", "Generation", "Legendary","OverallStrength", "isDragon", "hasHighHP", "hasHighDefense","hasHighSpAtk",
"hasHighSpDef","hasHighSpeed")
features <- c("Type.1", "Type.2", "Generation", "Legendary","OverallStrength", "isDragon", "hasHighHP", "hasHighDefense","hasHighSpAtk","hasHighSpDef","hasHighSpeed")
train <- train[, features]
str(train)
set.seed(54234)
indexes <- createDataPartition(train$Legendary,
times = 1,
p = 0.75,
list = FALSE)
pokemon.train <- train[indexes,]
pokemon.test <- train[-indexes,]
prop.table(table(train$Legendary))
prop.table(table(pokemon.train$Legendary))
prop.table(table(pokemon.test$Legendary))
train.control <- trainControl(method = "repeatedcv",
number = 10,
repeats = 3,
search = "grid")
tune.grid <- expand.grid(eta = c(0.05, 0.075, 0.1),
nrounds = c(50, 75, 100),
max_depth = 4:8,
min_child_weight = c(2.0, 2.25, 2.5),
colsample_bytree = c(0.3, 0.4, 0.5),
gamma = 0,
subsample = 1)
View(tune.grid)
cl <- makeCluster(3, type = "SOCK")
registerDoSNOW(cl)
caret.cv <- train(Legendary ~ .,
data = pokemon.train,
method = "xgbTree",
tuneGrid = tune.grid,
trControl = train.control)
stopCluster(cl)
caret.cv
preds <- predict(caret.cv, pokemon.test)
confusionMatrix(preds, pokemon.test$Legendary)
library(e1071)
NB = naiveBayes(pokemon.train, pokemon.train$Legendary,laplace = 1)
nbHat = predict(NB,pokemon.test$Legendary)
confusionMatrix(nbHat, pokemon.test$Legendary)
set.seed(54234)
indexes <- createDataPartition(train$isDragon,
times = 1,
p = 0.75,
list = FALSE)
dragon.train <- train[indexes,]
dragon.test <- train[-indexes,]
prop.table(table(train$isDragon))
prop.table(table(dragon.train$isDragon))
prop.table(table(dragon.test$isDragon))
train.control <- trainControl(method = "repeatedcv",
number = 10,
repeats = 3,
search = "grid")
tune.grid <- expand.grid(eta = c(0.05, 0.075, 0.1),
nrounds = c(50, 75, 100),
max_depth = 4:8,
min_child_weight = c(2.0, 2.25, 2.5),
colsample_bytree = c(0.3, 0.4, 0.5),
gamma = 0,
subsample = 1)
train.control <- trainControl(method = "repeatedcv",
number = 10,
repeats = 3,
search = "grid")
tune.grid <- expand.grid(eta = c(0.05, 0.075, 0.1),
nrounds = c(50, 75, 100),
max_depth = 4:8,
min_child_weight = c(2.0, 2.25, 2.5),
colsample_bytree = c(0.3, 0.4, 0.5),
gamma = 0,
subsample = 1)
cl <- makeCluster(3, type = "SOCK")
registerDoSNOW(cl)
caret.cv <- train(Legendary ~ .,
data = dragon.train,
method = "xgbTree",
tuneGrid = tune.grid,
trControl = train.control)
stopCluster(cl)
caret.cv
preds <- predict(caret.cv, dragon.test)
confusionMatrix(preds, dragon.test$isDragon)
set.seed(54234)
indexes <- createDataPartition(train$isDragon,
times = 1,
p = 0.75,
list = FALSE)
dragon.train <- train[indexes,]
dragon.test <- train[-indexes,]
prop.table(table(train$isDragon))
prop.table(table(dragon.train$isDragon))
prop.table(table(dragon.test$isDragon))
train.control <- trainControl(method = "repeatedcv",
number = 10,
repeats = 3,
search = "grid")
tune.grid <- expand.grid(eta = c(0.05, 0.075, 0.1),
nrounds = c(50, 75, 100),
max_depth = 4:8,
min_child_weight = c(2.0, 2.25, 2.5),
colsample_bytree = c(0.3, 0.4, 0.5),
gamma = 0,
subsample = 1)
cl <- makeCluster(3, type = "SOCK")
registerDoSNOW(cl)
caret.cv <- train(Legendary ~ .,
data = dragon.train,
method = "xgbTree",
tuneGrid = tune.grid,
trControl = train.control)
cl <- makeCluster(3, type = "SOCK")
registerDoSNOW(cl)
caret.cv <- train(Legendary ~ .,
data = dragon.train,
method = "xgbTree",
tuneGrid = tune.grid,
trControl = train.control)
stopCluster(cl)
cl <- makeCluster(3, type = "SOCK")
registerDoSNOW(cl)
caret.cv <- train(isDragon ~ .,
data = dragon.train,
method = "xgbTree",
tuneGrid = tune.grid,
trControl = train.control)
stopCluster(cl)
caret.cv
preds <- predict(caret.cv, dragon.test)
confusionMatrix(preds, dragon.test$isDragon)
library(e1071)
NB = naiveBayes(pokemon.train, pokemon.train$Legendary,laplace = 1)
nbHat = predict(NB,pokemon.test$Legendary)
confusionMatrix(nbHat, pokemon.test$Legendary)
ctable <- as.table(confusionMatrix(preds, dragon.test$isDragon), nrow = 2, byrow = TRUE)
fourfoldplot(ctable, color = c("#CC6666", "#99CC99"),
conf.level = 0, margin = 1, main = "Confusion Matrix")
fourfoldplot(ctable, color = c("#CC6666", "#99CC99"),
conf.level = 0, margin = 1, main = "Confusion Matrix", varnames=TRUE)
preds
library(e1071)
train.control <- trainControl(method = "repeatedcv",
number = 10,
repeats = 3,
search = "grid")
caret.cv <- train(Legendary ~ .,
data = pokemon.train,
method = "nb",
trControl = train.control)
cl <- makeCluster(3, type = "SOCK")
registerDoSNOW(cl)
caret.cv <- train(Legendary ~ .,
data = pokemon.train,
method = "nb",
trControl = train.control)
stopCluster(cl)
library(e1071)
train.control <- trainControl(method = "repeatedcv",
number = 10,
repeats = 3,
search = "grid")
cl <- makeCluster(3, type = "SOCK")
registerDoSNOW(cl)
caret.cv <- train(Legendary ~ .,
data = pokemon.train,
method = "nb",
trControl = train.control,
tuneLength = 5)
library(e1071)
train.control <- trainControl(method = "repeatedcv",
number = 10,
repeats = 3,
search = "grid")
grid <- data.frame(fL=c(0,0.5,1.0), usekernel = TRUE, adjust=c(0,0.5,1.0))
cl <- makeCluster(3, type = "SOCK")
registerDoSNOW(cl)
caret.cv <- train(Legendary ~ .,
data = pokemon.train,
method = "nb",
trControl = train.control,
tuneGrid = grid)
stopCluster(cl)
library(e1071)
train.control <- trainControl(method = "cv",
number = 10)
cl <- makeCluster(3, type = "SOCK")
registerDoSNOW(cl)
caret.cv <- train(Legendary ~ .,
data = pokemon.train,
method = "nb",
trControl = train.control)
train.control <- trainControl(method = "cv",
number = 10)
caret.cv <- train(Legendary ~ .,
data = pokemon.train,
method = "nb",
trControl = train.control)
NB = naiveBayes(pokemon.train, pokemon.train$Legendary,laplace = 1)
nbHat = predict(NB,pokemon.test$Legendary)
confusionMatrix(nbHat, pokemon.test$Legendary)
NB = naiveBayes(pokemon.train, pokemon.train$Legendary,laplace = 0.5)
nbHat = predict(NB,pokemon.test$Legendary)
confusionMatrix(nbHat, pokemon.test$Legendary)
NB = naiveBayes(pokemon.train, pokemon.train$Legendary,laplace = 1.0)
nbHat = predict(NB,pokemon.test$Legendary)
confusionMatrix(nbHat, pokemon.test$Legendary)
NB = naiveBayes(pokemon.train, pokemon.train$Legendary,laplace = 5)
nbHat = predict(NB,pokemon.test$Legendary)
confusionMatrix(nbHat, pokemon.test$Legendary)
NB = naiveBayes(pokemon.train, pokemon.train$Legendary,laplace = 10)
nbHat = predict(NB,pokemon.test$Legendary)
confusionMatrix(nbHat, pokemon.test$Legendary)
NB = naiveBayes(pokemon.train, pokemon.train$Legendary,laplace = 100)
nbHat = predict(NB,pokemon.test$Legendary)
confusionMatrix(nbHat, pokemon.test$Legendary)
NB = naiveBayes(pokemon.train, pokemon.train$Legendary,laplace = 1)
nbHat = predict(NB,pokemon.test$Legendary)
confusionMatrix(nbHat, pokemon.test$Legendary)
cl <- makeCluster(3, type = "SOCK")
registerDoSNOW(cl)
knn_fit <- train(Legendary ~., data = pokemon.train, method = "knn",
trControl= train.control,
preProcess = c("center", "scale"),
tuneLength = 10)
stopCluster(cl)
knn_fit <- train(Legendary ~., data = pokemon.train, method = "knn",
trControl= train.control,
preProcess = c("center", "scale"),
tuneLength = 10)
cl <- makeCluster(3, type = "SOCK")
registerDoSNOW(cl)
knn_fit <- train(Legendary ~., data = pokemon.train, method = "knn",
trControl= train.control,
preProcess = c("center", "scale"),
tuneLength = 10)
stopCluster(cl)
cl <- makeCluster(3, type = "SOCK")
registerDoSNOW(cl)
knn_fit <- train(Legendary ~., data = pokemon.train, method = "knn",
trControl= train.control,
preProcess = c("center", "scale"),
tuneLength = 10)
stopCluster(cl)
knn_fit
knnHat = predict(knn_fit, pokemon.test$Legendary)
confusionMatrix(knnHat, pokemon.test$Legendary)
knnHat = predict(knn_fit, pokemon.test$Legendary)
library(caret)
library(doSNOW)
train = read.csv("Pokemon.csv", stringsAsFactors = FALSE)
View(train)
table(train$Type.2)
train$Type.2[train$Type.2 == ""] <- "No Second Type"
train$OverallStrength <- ifelse(train$Total > median(train$Total),
"Strong", "Weak")
train$isDragon <- ifelse(train$Type.1 == "Dragon", "Y", "N")
train$hasHighHP <- ifelse(train$HP > median(train$HP), "Y", "N")
train$hasHighAttack <- ifelse(train$Attack > median(train$Attack), "Y", "N")
train$hasHighDefense <- ifelse(train$Defense > median(train$Defense), "Y", "N")
train$hasHighSpAtk <- ifelse(train$Sp..Atk > median(train$Sp..Atk), "Y", "N")
train$hasHighSpDef <- ifelse(train$Sp..Def > median(train$Sp..Def), "Y", "N")
train$hasHighSpeed <- ifelse(train$Speed > median(train$Speed), "Y", "N")
train$Type.1 <- as.factor(train$Type.1)
train$Type.2 <- as.factor(train$Type.2)
train$Generation <- as.factor(train$Generation)
train$Legendary <- as.factor(train$Legendary)
train$OverallStrength <- as.factor(train$OverallStrength)
train$isDragon <- as.factor(train$isDragon)
train$hasHighHP <- as.factor(train$hasHighHP)
train$hasHighAttack <- as.factor(train$hasHighAttack)
train$hasHighDefense <- as.factor(train$hasHighDefense)
train$hasHighSpAtk <- as.factor(train$hasHighSpAtk)
train$hasHighSpDef <- as.factor(train$hasHighSpDef)
train$hasHighSpeed <- as.factor(train$hasHighSpeed)
View(train)
features <- c("Type.1", "Type.2", "Generation", "Legendary","OverallStrength", "isDragon", "hasHighHP", "hasHighDefense","hasHighSpAtk","hasHighSpDef","hasHighSpeed")
train <- train[, features]
str(train)
set.seed(54234)
indexes <- createDataPartition(train$Legendary,
times = 1,
p = 0.75,
list = FALSE)
pokemon.train <- train[indexes,]
pokemon.test <- train[-indexes,]
prop.table(table(train$Legendary))
prop.table(table(pokemon.train$Legendary))
prop.table(table(pokemon.test$Legendary))
train.control <- trainControl(method = "repeatedcv",
number = 10,
repeats = 3,
search = "grid")
knn_fit <- train(Legendary ~., data = pokemon.train, method = "knn",
trControl= train.control,
preProcess = c("center", "scale"),
tuneLength = 10)
cl <- makeCluster(3, type = "SOCK")
registerDoSNOW(cl)
knn_fit <- train(Legendary ~., data = pokemon.train, method = "knn",
trControl= train.control,
preProcess = c("center", "scale"),
tuneLength = 10)
stopCluster(cl)
knn_fit
knnHat = predict(knn_fit, pokemon.test$Legendary)
knnHat = predict(knn_fit, pokemon.test)
confusionMatrix(knnHat, pokemon.test$Legendary)
fourfoldplot(confusionMatrix(knnHat, pokemon.test$Legendary), color = c("#CC6666", "#99CC99"),
conf.level = 0, margin = 1, main = "Confusion Matrix")
ctable <- as.table(confusionMatrix(knnHat, pokemon.test$Legendary), nrow = 2, byrow = TRUE)
fourfoldplot(ctable, color = c("#CC6666", "#99CC99"),
conf.level = 0, margin = 1, main = "Confusion Matrix")
library(caret)
library(doSNOW)
train = read.csv("Pokemon.csv", stringsAsFactors = FALSE)
View(train)
table(train$Type.2)
train$Type.2[train$Type.2 == ""] <- "No Second Type"
train$OverallStrength <- ifelse(train$Total > median(train$Total),
"Strong", "Weak")
train$isDragon <- ifelse(train$Type.1 == "Dragon", "Y", "N")
train$hasHighHP <- ifelse(train$HP > median(train$HP), "Y", "N")
train$hasHighAttack <- ifelse(train$Attack > median(train$Attack), "Y", "N")
train$hasHighDefense <- ifelse(train$Defense > median(train$Defense), "Y", "N")
train$hasHighSpAtk <- ifelse(train$Sp..Atk > median(train$Sp..Atk), "Y", "N")
train$hasHighSpDef <- ifelse(train$Sp..Def > median(train$Sp..Def), "Y", "N")
train$hasHighSpeed <- ifelse(train$Speed > median(train$Speed), "Y", "N")
train$Type.1 <- as.factor(train$Type.1)
train$Type.2 <- as.factor(train$Type.2)
train$Generation <- as.factor(train$Generation)
train$Legendary <- as.factor(train$Legendary)
train$OverallStrength <- as.factor(train$OverallStrength)
train$isDragon <- as.factor(train$isDragon)
train$hasHighHP <- as.factor(train$hasHighHP)
train$hasHighAttack <- as.factor(train$hasHighAttack)
train$hasHighDefense <- as.factor(train$hasHighDefense)
train$hasHighSpAtk <- as.factor(train$hasHighSpAtk)
train$hasHighSpDef <- as.factor(train$hasHighSpDef)
train$hasHighSpeed <- as.factor(train$hasHighSpeed)
View(train)
features <- c("Type.1", "Type.2", "Generation", "Legendary","OverallStrength", "isDragon", "hasHighHP", "hasHighDefense","hasHighSpAtk","hasHighSpDef","hasHighSpeed")
train <- train[, features]
str(train)
set.seed(54234)
indexes <- createDataPartition(train$Legendary,
times = 1,
p = 0.75,
list = FALSE)
pokemon.train <- train[indexes,]
pokemon.test <- train[-indexes,]
prop.table(table(train$Legendary))
prop.table(table(pokemon.train$Legendary))
prop.table(table(pokemon.test$Legendary))
train.control <- trainControl(method = "repeatedcv",
number = 10,
repeats = 3,
search = "grid")
tune.grid <- expand.grid(eta = c(0.05, 0.075, 0.1),
nrounds = c(50, 75, 100),
max_depth = 4:8,
min_child_weight = c(2.0, 2.25, 2.5),
colsample_bytree = c(0.3, 0.4, 0.5),
gamma = 0,
subsample = 1)
View(tune.grid)
tune.grid <- expand.grid(eta = c(0.05, 0.075, 0.1),
nrounds = c(50, 75, 100),
max_depth = 4:8,
min_child_weight = c(2.0, 2.25, 2.5),
colsample_bytree = c(0.5, 0.75, 1.0),
gamma = 0,
subsample = 1)
View(tune.grid)
cl <- makeCluster(3, type = "SOCK")
registerDoSNOW(cl)
caret.cv <- train(Legendary ~ .,
data = pokemon.train,
method = "xgbTree",
tuneGrid = tune.grid,
trControl = train.control)
stopCluster(cl)
caret.cv
xgbHat = predict(caret.cv, pokemon.test)
confusionMatrix(xgbHat, pokemon.test$Legendary)
library(e1071)
NB = naiveBayes(pokemon.train, pokemon.train$Legendary,laplace = 1)
nbHat = predict(NB,pokemon.test$Legendary)
confusionMatrix(nbHat, pokemon.test$Legendary)
cl <- makeCluster(3, type = "SOCK")
registerDoSNOW(cl)
knn_fit <- train(Legendary ~., data = pokemon.train, method = "knn",
trControl= train.control,
preProcess = c("center", "scale"),
tuneLength = 10)
stopCluster(cl)
knn_fit
knnHat = predict(knn_fit, pokemon.test)
confusionMatrix(knnHat, pokemon.test$Legendary)
merge(
merge(train %>% dplyr::group_by(train$Type.1) %>% dplyr::summarize(tot=n()),
train %>% dplyr::group_by(train$Type.1,train$Legendary) %>% dplyr::summarize(count=n()),by='Type.1'),
COL, by='Type.1') %>%
ggplot(aes(x=reorder(train$Type.1,tot),y=count)) +
geom_bar(aes(fill=color,alpha=train$Legendary),color='white',size=.25,stat='identity') +
scale_fill_identity() + coord_flip() + theme_fivethirtyeight() +
ggtitle("Pokemon Distribution") + scale_alpha_discrete(range=c(.9,.6))
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library(caret)
library(caret)
library(caret)
library(caret)
library(caret)
library(caret)
library(doSNOW)
train = read.csv("Pokemon.csv", stringsAsFactors = FALSE)
View(train)
table(train$Type.2)
train$Type.2[train$Type.2 == ""] <- "No Second Type"
train$OverallStrength <- ifelse(train$Total > median(train$Total),
"Strong", "Weak")
train$isDragon <- ifelse(train$Type.1 == "Dragon", "Y", "N")
train$hasHighHP <- ifelse(train$HP > median(train$HP), "Y", "N")
train$hasHighAttack <- ifelse(train$Attack > median(train$Attack), "Y", "N")
train$hasHighDefense <- ifelse(train$Defense > median(train$Defense), "Y", "N")
train$hasHighSpAtk <- ifelse(train$Sp..Atk > median(train$Sp..Atk), "Y", "N")
train$hasHighSpDef <- ifelse(train$Sp..Def > median(train$Sp..Def), "Y", "N")
train$hasHighSpeed <- ifelse(train$Speed > median(train$Speed), "Y", "N")
train$Type.1 <- as.factor(train$Type.1)
train$Type.2 <- as.factor(train$Type.2)
train$Generation <- as.factor(train$Generation)
train$Legendary <- as.factor(train$Legendary)
train$OverallStrength <- as.factor(train$OverallStrength)
train$isDragon <- as.factor(train$isDragon)
train$hasHighHP <- as.factor(train$hasHighHP)
train$hasHighAttack <- as.factor(train$hasHighAttack)
train$hasHighDefense <- as.factor(train$hasHighDefense)
train$hasHighSpAtk <- as.factor(train$hasHighSpAtk)
train$hasHighSpDef <- as.factor(train$hasHighSpDef)
train$hasHighSpeed <- as.factor(train$hasHighSpeed)
View(train)
merge(
merge(train %>% dplyr::group_by(train$Type.1) %>% dplyr::summarize(tot=n()),
train %>% dplyr::group_by(train$Type.1,train$Legendary) %>% dplyr::summarize(count=n()),by='Type.1'),
COL, by='Type.1') %>%
ggplot(aes(x=reorder(train$Type.1,tot),y=count)) +
geom_bar(aes(fill=color,alpha=train$Legendary),color='white',size=.25,stat='identity') +
scale_fill_identity() + coord_flip() + theme_fivethirtyeight() +
ggtitle("Pokemon Distribution") + scale_alpha_discrete(range=c(.9,.6))
install.packages("magrittr")
install.packages("magrittr")
merge(
merge(train %>% dplyr::group_by(train$Type.1) %>% dplyr::summarize(tot=n()),
train %>% dplyr::group_by(train$Type.1,train$Legendary) %>% dplyr::summarize(count=n()),by='Type.1'),
COL, by='Type.1') %>%
ggplot(aes(x=reorder(train$Type.1,tot),y=count)) +
geom_bar(aes(fill=color,alpha=train$Legendary),color='white',size=.25,stat='identity') +
scale_fill_identity() + coord_flip() + theme_fivethirtyeight() +
ggtitle("Pokemon Distribution") + scale_alpha_discrete(range=c(.9,.6))
library(magrittr)
library(dplyr)
install.packages("dplyr")
library(dplyr)
library(magrittr)
library(dplyr)
merge(
merge(train %>% dplyr::group_by(train$Type.1) %>% dplyr::summarize(tot=n()),
train %>% dplyr::group_by(train$Type.1,train$Legendary) %>% dplyr::summarize(count=n()),by='Type.1'),
COL, by='Type.1') %>%
ggplot(aes(x=reorder(train$Type.1,tot),y=count)) +
geom_bar(aes(fill=color,alpha=train$Legendary),color='white',size=.25,stat='identity') +
scale_fill_identity() + coord_flip() + theme_fivethirtyeight() +
ggtitle("Pokemon Distribution") + scale_alpha_discrete(range=c(.9,.6))
install.packages("magrittr")
